{"version":3,"sources":["reducers.js","serviceWorker.js","components/Card.js","components/CardList.js","components/SearchField.js","components/Header.js","containers/App.js","actions.js","constants.js","index.js"],"names":["initialSearchState","searchFieldInput","initialRobotsState","isPending","robots","error","Boolean","window","location","hostname","match","Card","id","name","email","src","className","alt","CardList","map","key","SearchField","sendSearchInput","useState","searchInput","setsearchInput","useEffect","type","placeholder","value","onChange","e","target","Header","title","connect","state","searchRobots","pending","requestRobots","dispatch","handleSearchInput","payload","onRequestRobots","fetch","mode","then","res","json","catch","err","props","filteredRobots","filter","robot","toLocaleLowerCase","includes","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.9e00b2d7.chunk.js","sourcesContent":["import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_ERROR\r\n} from \"./constants\";\r\n\r\nconst initialSearchState = { searchFieldInput: \"\" };\r\n\r\nexport const searchRobots = (state = initialSearchState, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return { ...state, searchFieldInput: action.payload };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialRobotsState = {\r\n  isPending: false,\r\n  robots: [],\r\n  error: \"\"\r\n};\r\nexport const requestRobots = (state = initialRobotsState, action = {}) => {\r\n  switch (action.type) {\r\n    case REQUEST_ROBOTS_PENDING:\r\n      return { ...initialRobotsState, isPending: true };\r\n    case REQUEST_ROBOTS_SUCCESS:\r\n      return {\r\n        ...initialRobotsState,\r\n        isPending: false,\r\n        robots: action.payload\r\n      };\r\n    case REQUEST_ROBOTS_ERROR:\r\n      return {\r\n        ...initialRobotsState,\r\n        isPending: false,\r\n        error: action.payload\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\n\r\nconst Card = ({ id, name, email, src }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 ma3 ma2 grow  shadow-5\">\r\n      <img src={src} alt={`robot ${id}`} />\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nexport const CardList = ({ robots }) => {\r\n  return robots.map(({ id, name, email }) => (\r\n    <Card\r\n      id={id}\r\n      name={name}\r\n      email={email}\r\n      key={id}\r\n      src={`https://robohash.org/${id}?200x200`}\r\n    />\r\n  ));\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\n\r\nconst SearchField = ({ sendSearchInput }) => {\r\n  const [searchInput, setsearchInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    sendSearchInput(searchInput);\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <input\r\n        type=\"search\"\r\n        placeholder=\"Search Robot\"\r\n        value={searchInput}\r\n        onChange={e => {\r\n          setsearchInput(e.target.value);\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchField;\r\n","import React from \"react\";\r\n\r\nexport const Header = ({ title }) => {\r\n  return (\r\n    <div>\r\n      <h1>{title}</h1>\r\n    </div>\r\n  );\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { CardList } from \"../components/CardList\";\r\nimport SearchField from \"../components/SearchField\";\r\n\r\nimport { setSearchField, requestRobots } from \"../actions\";\r\nimport { Header } from \"../components/Header\";\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    searchFieldInput: state.searchRobots.searchFieldInput,\r\n    pending: state.requestRobots.isPending,\r\n    robots: state.requestRobots.robots,\r\n    error: state.requestRobots.error\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    handleSearchInput: searchInput => dispatch(setSearchField(searchInput)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  };\r\n};\r\n\r\nconst App = props => {\r\n  const {\r\n    searchFieldInput,\r\n    handleSearchInput,\r\n    robots,\r\n    pending,\r\n    onRequestRobots\r\n  } = props;\r\n\r\n  useEffect(() => {\r\n    onRequestRobots();\r\n  }, []);\r\n\r\n  // const handleSearchInput = searchInput => {\r\n  //   setsearchFieldInput(searchInput);\r\n  // };\r\n  const filteredRobots = robots.filter(robot =>\r\n    robot.name\r\n      .toLocaleLowerCase()\r\n      .includes(searchFieldInput.toLocaleLowerCase())\r\n  );\r\n\r\n  return !pending ? (\r\n    <div className=\"tc\">\r\n      <Header title=\"Robo Friends\" />\r\n      <SearchField sendSearchInput={handleSearchInput} />\r\n      <CardList robots={filteredRobots} />\r\n    </div>\r\n  ) : (\r\n    <h1 className=\"tc\">Loading..</h1>\r\n  );\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n  REQUEST_ROBOTS_ERROR\r\n} from \"./constants\";\r\n\r\nexport const setSearchField = text => ({\r\n  type: CHANGE_SEARCH_FIELD,\r\n  payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n  dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n  fetch(\"https://jsonplaceholder.typicode.com/users\", {\r\n    mode: \"cors\"\r\n    // headers: {\r\n    //   \"Access-Control-Allow-Origin\": \"https://jsonplaceholder.typicode.com\"\r\n    // }\r\n  })\r\n    .then(res => res.json())\r\n    .then(res => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: res }))\r\n    .catch(err => dispatch({ type: REQUEST_ROBOTS_ERROR, payload: err }));\r\n};\r\n","export const CHANGE_SEARCH_FIELD = \"CHANGE_SEARCH_FIELD\";\r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_ERROR = \"REQUEST_ROBOTS_ERROR\";\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nimport { searchRobots, requestRobots } from \"./reducers\";\n\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}